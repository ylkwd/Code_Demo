# -*- coding: utf-8 -*-
"""ViTonBBMetrics

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HbHNp0CPqEyoEsN_PJvDCY74U-UM-Vda
"""

! pip install transformers==4.28.0 datasets

"""# Image classification"""

from huggingface_hub import notebook_login

notebook_login()

"""## Load dataset"""

from datasets import load_dataset

food = load_dataset("juanfengyun/SEEDTrain", split="train[:325]")

from google.colab import drive
drive.mount('/content/drive')

from datasets import load_dataset

ds= load_dataset("/content/drive/MyDrive/MFCC/BB1",split="train")

"""Split the dataset's `train` split into a train and test set with the [train_test_split](https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.train_test_split) method:"""

ds

ds.data

ds = ds.train_test_split(test_size=0.2)

ds

"""Each example in the dataset has two fields:

- `image`: a PIL image of the food item
- `label`: the label class of the food item

To make it easier for the model to get the label name from the label id, create a dictionary that maps the label name
to an integer and vice versa:
"""

labels = ds["train"].features["label"].names
label2id, id2label = dict(), dict()
for i, label in enumerate(labels):
    label2id[label] = str(i)
    id2label[str(i)] = label

"""Now you can convert the label id to a label name:"""

labels

id2label

"""## Preprocess

The next step is to load a ViT image processor to process the image into a tensor:
"""

from transformers import AutoImageProcessor

checkpoint = "google/vit-base-patch16-224-in21k"
image_processor = AutoImageProcessor.from_pretrained(checkpoint)

"""Apply some image transformations to the images to make the model more robust against overfitting. Here you'll use torchvision's [`transforms`](https://pytorch.org/vision/stable/transforms.html) module, but you can also use any image library you like.

Crop a random part of the image, resize it, and normalize it with the image mean and standard deviation:
"""

from torchvision.transforms import RandomResizedCrop, Compose, Normalize, ToTensor

normalize = Normalize(mean=image_processor.image_mean, std=image_processor.image_std)
size = (
    image_processor.size["shortest_edge"]
    if "shortest_edge" in image_processor.size
    else (image_processor.size["height"], image_processor.size["width"])
)
_transforms = Compose([RandomResizedCrop(size), ToTensor(), normalize])

"""Then create a preprocessing function to apply the transforms and return the `pixel_values` - the inputs to the model - of the image:"""

def transforms(examples):
    examples["pixel_values"] = [_transforms(img.convert("RGB")) for img in examples["image"]]
    del examples["image"]
    return examples

"""To apply the preprocessing function over the entire dataset, use ðŸ¤— Datasets [with_transform](https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.with_transform) method. The transforms are applied on the fly when you load an element of the dataset:"""

ds = ds.with_transform(transforms)

testDs = ds["test"]

testDs

testDs = load_dataset("/content/drive/MyDrive/Colab Notebooks/SpeechClassification/test")

testDs

prepared_Test = testDs.with_transform(transforms)

"""Now create a batch of examples using [DefaultDataCollator](https://huggingface.co/docs/transformers/main/en/main_classes/data_collator#transformers.DefaultDataCollator). Unlike other data collators in ðŸ¤— Transformers, the `DefaultDataCollator` does not apply additional preprocessing such as padding."""

from transformers import DefaultDataCollator

data_collator = DefaultDataCollator()

"""## Evaluate

Including a metric during training is often helpful for evaluating your model's performance. You can quickly load an
evaluation method with the ðŸ¤— [Evaluate](https://huggingface.co/docs/evaluate/index) library. For this task, load
the [accuracy](https://huggingface.co/spaces/evaluate-metric/accuracy) metric (see the ðŸ¤— Evaluate [quick tour](https://huggingface.co/docs/evaluate/a_quick_tour) to learn more about how to load and compute a metric):
"""

!pip install evaluate

import evaluate

accuracy = evaluate.load("accuracy")

import evaluate

metrics = evaluate.combine(["accuracy", "f1", "precision", "recall"])

"""Then create a function that passes your predictions and labels to [compute](https://huggingface.co/docs/evaluate/main/en/package_reference/main_classes#evaluate.EvaluationModule.compute) to calculate the accuracy:

Call compute on metric to calculate the accuracy of your predictions. Before passing your predictions to compute, you need to convert the logits to predictions (remember all ðŸ¤— Transformers models return logits):
"""

import numpy as np


def compute_metrics(eval_pred):
    predictions, labels = eval_pred
    predictions = np.argmax(predictions, axis=1)
    return metrics.compute(predictions=predictions, references=labels)

"""Your `compute_metrics` function is ready to go now, and you'll return to it when you set up your training."""

!pip install wandb
import wandb

wandb.login()

"""## Train

<Tip>

If you aren't familiar with finetuning a model with the [Trainer](https://huggingface.co/docs/transformers/main/en/main_classes/trainer#transformers.Trainer), take a look at the basic tutorial [here](https://huggingface.co/docs/transformers/main/en/tasks/../training#train-with-pytorch-trainer)!

</Tip>

You're ready to start training your model now! Load ViT with [AutoModelForImageClassification](https://huggingface.co/docs/transformers/main/en/model_doc/auto#transformers.AutoModelForImageClassification). Specify the number of labels along with the number of expected labels, and the label mappings:
"""

from transformers import AutoModelForImageClassification, TrainingArguments, Trainer

model = AutoModelForImageClassification.from_pretrained(
    checkpoint,
    num_labels=len(labels),
    id2label=id2label,
    label2id=label2id,
)

"""At this point, only three steps remain:

1. Define your training hyperparameters in [TrainingArguments](https://huggingface.co/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments). It is important you don't remove unused columns because this'll drop the `image` column. Without the `image` column, you can't create `pixel_values`. Set `remove_unused_columns=False` to prevent this behavior! The only other required parameter is `output_dir` which specifies where to save your model. You'll push this model to the Hub by setting `push_to_hub=True` (you need to be signed in to Hugging Face to upload your model). At the end of each epoch, the [Trainer](https://huggingface.co/docs/transformers/main/en/main_classes/trainer#transformers.Trainer) will evaluate the accuracy and save the training checkpoint.
2. Pass the training arguments to [Trainer](https://huggingface.co/docs/transformers/main/en/main_classes/trainer#transformers.Trainer) along with the model, dataset, tokenizer, data collator, and `compute_metrics` function.
3. Call [train()](https://huggingface.co/docs/transformers/main/en/main_classes/trainer#transformers.Trainer.train) to finetune your model.
"""

pip install --upgrade accelerate

pip install transformers==4.28.0

training_args = TrainingArguments(
    output_dir="./my_MFCC_VITmodelBBMetrics",
    remove_unused_columns=False,
    evaluation_strategy="epoch",
    save_strategy="epoch",
    learning_rate=5e-5,
    per_device_train_batch_size=16,
    gradient_accumulation_steps=4,
    per_device_eval_batch_size=16,
    num_train_epochs=80,
    warmup_ratio=0.1,
    logging_steps=10,
    load_best_model_at_end=True,
    metric_for_best_model="accuracy",
    push_to_hub=True,
    #  report_to="wandb",
)

trainer = Trainer(
    model=model,
    args=training_args,
    data_collator=data_collator,
    train_dataset=ds["train"],
    # eval_dataset=food["test"],
    eval_dataset=ds["test"],
    tokenizer=image_processor,
    compute_metrics=compute_metrics,
)

trainer.train()

wandb.finish()

trainer.save_state()

trainer.state.log_history

type(trainer.state.log_history[0])

import pandas as pd
import matplotlib.pyplot as plt

data = pd.DataFrame(trainer.state.log_history)
data

data.dropna(subset=['eval_accuracy', 'eval_loss'])

from matplotlib import pyplot as plt
_df_13['eval_accuracy'].plot(kind='line', figsize=(8, 4), title='eval_accuracy')
plt.gca().spines[['top', 'right']].set_visible(False)

from matplotlib import pyplot as plt
_df_15['eval_samples_per_second'].plot(kind='line', figsize=(8, 4), title='eval_samples_per_second')
plt.gca().spines[['top', 'right']].set_visible(False)
plt.tight_layout()

"""Once training is completed, share your model to the Hub with the [push_to_hub()](https://huggingface.co/docs/transformers/main/en/main_classes/trainer#transformers.Trainer.push_to_hub) method so everyone can use your model:"""

trainer.push_to_hub()

"""<Tip>

For a more in-depth example of how to finetune a model for image classification, take a look at the corresponding [PyTorch notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/image_classification.ipynb).

</Tip>

## Inference

Great, now that you've fine-tuned a model, you can use it for inference!

Load an image you'd like to run inference on:
"""

ds = load_dataset("juanfengyun/SEEDTest",split="test[:110]")

len(ds)

trainer = Trainer(
    model=model,
    args=training_args,
    data_collator=data_collator,
    train_dataset=ds["train"],
    # eval_dataset=food["test"],
    eval_dataset=ds["test"],
    tokenizer=image_processor,
    compute_metrics=compute_metrics,
)

ds['test']

trainer.evaluate(ds['test'])

labels1 = prepared_Test["train"].features["label"].names
label2id1, id2label1 = dict(), dict()
for i, label in enumerate(labels1):
    label2id1[label] = str(i)
    id2label1[str(i)] = label

image=ds["image"]
image[2]

type(image)

for i in range(10):
  image[i]

labels1[0]

from transformers import pipeline

classifier = pipeline("image-classification", model="my_MFCC_VITmodel")
for i in range(110):
  list=classifier(image[i])
list
# for img in image:
#   classifier(img)

"""You can also manually replicate the results of the `pipeline` if you'd like:

Load an image processor to preprocess the image and return the `input` as PyTorch tensors:
"""

from transformers import AutoImageProcessor
import torch

image_processor = AutoImageProcessor.from_pretrained("my_awesome_food_model")
inputs = image_processor(image, return_tensors="pt")

"""Pass your inputs to the model and return the logits:"""

from transformers import AutoModelForImageClassification

model = AutoModelForImageClassification.from_pretrained("my_awesome_food_model")
with torch.no_grad():
    logits = model(**inputs).logits

"""Get the predicted label with the highest probability, and use the model's `id2label` mapping to convert it to a label:"""

predicted_label = logits.argmax(-1).item()
model.config.id2label[predicted_label]